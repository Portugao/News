<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Form\Type\Base;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Translation\Extractor\Annotation\Ignore;
use Translation\Extractor\Annotation\Translate;
use Zikula\Bundle\FormExtensionBundle\Form\DataTransformer\NullToEmptyTransformer;
use Zikula\GroupsModule\Entity\GroupEntity;
use MU\NewsModule\Form\Type\Field\MultiListType;
use MU\NewsModule\AppSettings;
use MU\NewsModule\Helper\ListEntriesHelper;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    public function __construct(
        ListEntriesHelper $listHelper
    ) {
        $this->listHelper = $listHelper;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralSettingsFields($builder, $options);
        $this->addCategorySettingsFields($builder, $options);
        $this->addDisplaySettingFields($builder, $options);
        $this->addUploadSettingsFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addImagesFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for general settings fields.
     */
    public function addGeneralSettingsFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add($builder->create('enableAttribution', CheckboxType::class, [
            'label' => 'Enable attribution:',
            'label_attr' => [
                'class' => 'switch-custom',
            ],
            'attr' => [
                'class' => '',
                'title' => 'The enable attribution option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('enableMultiLanguage', CheckboxType::class, [
            'label' => 'Enable multi language:',
            'label_attr' => [
                'class' => 'switch-custom',
            ],
            'attr' => [
                'class' => '',
                'title' => 'The enable multi language option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('showAuthor', CheckboxType::class, [
            'label' => 'Show author:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'This setting allows to enable the display of author informations within an article.',
            ],
            'help' => 'This setting allows to enable the display of author informations within an article.',
            'attr' => [
                'class' => '',
                'title' => 'The show author option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('showDate', CheckboxType::class, [
            'label' => 'Show date:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'This setting allows to enable the display of date informations within an article.',
            ],
            'help' => 'This setting allows to enable the display of date informations within an article.',
            'attr' => [
                'class' => '',
                'title' => 'The show date option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
    }

    /**
     * Adds fields for category settings fields.
     */
    public function addCategorySettingsFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add($builder->create('enableCategorization', CheckboxType::class, [
            'label' => 'Enable categorization:',
            'label_attr' => [
                'class' => 'switch-custom',
            ],
            'attr' => [
                'class' => '',
                'title' => 'The enable categorization option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
    }

    /**
     * Adds fields for display setting fields.
     */
    public function addDisplaySettingFields(FormBuilderInterface $builder, array $options = []): void
    {
        $listEntries = $this->listHelper->getEntries('appSettings', 'defaultMessageSorting');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('defaultMessageSorting', ChoiceType::class, [
            'label' => 'Default message sorting:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'You can customise several display-oriented aspects of the articles.',
            ],
            'help' => 'You can customise several display-oriented aspects of the articles.',
            'empty_data' => 'articledatetime',
            'attr' => [
                'class' => '',
                'title' => 'Choose the default message sorting.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'defaultMessageSortingBackend');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('defaultMessageSortingBackend', ChoiceType::class, [
            'label' => 'Default message sorting backend:',
            'empty_data' => 'articledatetime',
            'attr' => [
                'class' => '',
                'title' => 'Choose the default message sorting backend.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'sortingDirection');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('sortingDirection', ChoiceType::class, [
            'label' => 'Sorting direction:',
            'empty_data' => 'descending',
            'attr' => [
                'class' => '',
                'title' => 'Choose the sorting direction.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $builder->add($builder->create('enableMoreMessagesInCategory', CheckboxType::class, [
            'label' => 'Enable more messages in category:',
            'label_attr' => [
                'class' => 'switch-custom',
            ],
            'attr' => [
                'class' => '',
                'title' => 'The enable more messages in category option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('amountOfMoreArticlesInCategory', IntegerType::class, [
            'label' => 'Amount of more articles in category:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'When displaying an article, a number of additional article titles in the same category can be shown. To show the additional article titles for every article set the value above to a number larger than 0. When the value is set to 0, the number of additional article titles can be set per article by means of the article attribute \"morearticlesincat\". You need to enable \"article attributes\" yourself. When the setting above or the article attribute is set to 0, no titles will be extracted from the database.',
            ],
            'help' => 'When displaying an article, a number of additional article titles in the same category can be shown. To show the additional article titles for every article set the value above to a number larger than 0. When the value is set to 0, the number of additional article titles can be set per article by means of the article attribute \"morearticlesincat\". You need to enable \"article attributes\" yourself. When the setting above or the article attribute is set to 0, no titles will be extracted from the database.',
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => 'Enter the amount of more articles in category. Only digits are allowed.',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('displayPdfLink', CheckboxType::class, [
            'label' => 'Display pdf link:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Display a PDF link for the articles in the index page',
            ],
            'help' => 'Display a PDF link for the articles in the index page',
            'attr' => [
                'class' => '',
                'title' => 'The display pdf link option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
    }

    /**
     * Adds fields for upload settings fields.
     */
    public function addUploadSettingsFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add($builder->create('enablePictureUpload', CheckboxType::class, [
            'label' => 'Enable picture upload:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Allow uploading article pictures',
            ],
            'help' => 'Allow uploading article pictures',
            'attr' => [
                'class' => '',
                'title' => 'The enable picture upload option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $listEntries = $this->listHelper->getEntries('appSettings', 'imageFloatOnViewPage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('imageFloatOnViewPage', ChoiceType::class, [
            'label' => 'Image float on view page:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Image float on the view page',
            ],
            'help' => 'Image float on the view page',
            'empty_data' => 'left',
            'attr' => [
                'class' => '',
                'title' => 'Choose the image float on view page.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'imageFloatOnDisplayPage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('imageFloatOnDisplayPage', ChoiceType::class, [
            'label' => 'Image float on display page:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Image float on the article display page',
            ],
            'help' => 'Image float on the article display page',
            'empty_data' => 'left',
            'attr' => [
                'class' => '',
                'title' => 'Choose the image float on display page.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $builder->add('maxSize', TextType::class, [
            'label' => 'Max size:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'For example: 4000 (byte), 100k (kilobyte) and 1M (megabyte).',
            ],
            'help' => 'For example: 4000 (byte), 100k (kilobyte) and 1M (megabyte).',
            'empty_data' => '200k',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => 'Enter the max size.',
            ],
            'required' => true,
        ]);
    }

    /**
     * Adds fields for list views fields.
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('messageEntriesPerPage', IntegerType::class, [
            'label' => 'Message entries per page:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The amount of messages shown per page.',
            ],
            'help' => 'The amount of messages shown per page.',
            'empty_data' => 10,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => 'Enter the message entries per page. Only digits are allowed.',
            ],
            'required' => true,
        ]);
        $builder->add($builder->create('linkOwnMessagesOnAccountPage', CheckboxType::class, [
            'label' => 'Link own messages on account page:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to add a link to messages of the current user on his account page.',
            ],
            'help' => 'Whether to add a link to messages of the current user on his account page.',
            'attr' => [
                'class' => '',
                'title' => 'The link own messages on account page option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('showOnlyOwnEntries', CheckboxType::class, [
            'label' => 'Show only own entries:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether only own entries should be shown on view pages by default or not.',
            ],
            'help' => 'Whether only own entries should be shown on view pages by default or not.',
            'attr' => [
                'class' => '',
                'title' => 'The show only own entries option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('filterDataByLocale', CheckboxType::class, [
            'label' => 'Filter data by locale:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether automatically filter data in the frontend based on the current locale or not.',
            ],
            'help' => 'Whether automatically filter data in the frontend based on the current locale or not.',
            'attr' => [
                'class' => '',
                'title' => 'The filter data by locale option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
    }

    /**
     * Adds fields for images fields.
     */
    public function addImagesFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add($builder->create('enableShrinkingForMessageImageUpload1', CheckboxType::class, [
            'label' => 'Enable shrinking:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            ],
            'help' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => 'The enable shrinking option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add('shrinkWidthMessageImageUpload1', IntegerType::class, [
            'label' => 'Shrink width:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image width in pixels.',
            ],
            'help' => 'The maximum image width in pixels.',
            'empty_data' => 800,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink width',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('shrinkHeightMessageImageUpload1', IntegerType::class, [
            'label' => 'Shrink height:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image height in pixels.',
            ],
            'help' => 'The maximum image height in pixels.',
            'empty_data' => 600,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink height',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeMessageImageUpload1');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeMessageImageUpload1', ChoiceType::class, [
            'label' => 'Thumbnail mode:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail mode (inset or outbound).',
            ],
            'help' => 'Thumbnail mode (inset or outbound).',
            'empty_data' => 'inset',
            'attr' => [
                'class' => '',
                'title' => 'Choose the thumbnail mode.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $builder->add('thumbnailWidthMessageImageUpload1View', IntegerType::class, [
            'label' => 'Thumbnail width list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on view pages in pixels.',
            ],
            'help' => 'Thumbnail width on view pages in pixels.',
            'empty_data' => 32,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload1View', IntegerType::class, [
            'label' => 'Thumbnail height list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on view pages in pixels.',
            ],
            'help' => 'Thumbnail height on view pages in pixels.',
            'empty_data' => 24,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload1Display', IntegerType::class, [
            'label' => 'Thumbnail width detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on display pages in pixels.',
            ],
            'help' => 'Thumbnail width on display pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload1Display', IntegerType::class, [
            'label' => 'Thumbnail height detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on display pages in pixels.',
            ],
            'help' => 'Thumbnail height on display pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload1Edit', IntegerType::class, [
            'label' => 'Thumbnail width edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on edit pages in pixels.',
            ],
            'help' => 'Thumbnail width on edit pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload1Edit', IntegerType::class, [
            'label' => 'Thumbnail height edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on edit pages in pixels.',
            ],
            'help' => 'Thumbnail height on edit pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add($builder->create('enableShrinkingForMessageImageUpload2', CheckboxType::class, [
            'label' => 'Enable shrinking:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            ],
            'help' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => 'The enable shrinking option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add('shrinkWidthMessageImageUpload2', IntegerType::class, [
            'label' => 'Shrink width:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image width in pixels.',
            ],
            'help' => 'The maximum image width in pixels.',
            'empty_data' => 800,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink width',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('shrinkHeightMessageImageUpload2', IntegerType::class, [
            'label' => 'Shrink height:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image height in pixels.',
            ],
            'help' => 'The maximum image height in pixels.',
            'empty_data' => 600,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink height',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeMessageImageUpload2');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeMessageImageUpload2', ChoiceType::class, [
            'label' => 'Thumbnail mode:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail mode (inset or outbound).',
            ],
            'help' => 'Thumbnail mode (inset or outbound).',
            'empty_data' => 'inset',
            'attr' => [
                'class' => '',
                'title' => 'Choose the thumbnail mode.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $builder->add('thumbnailWidthMessageImageUpload2View', IntegerType::class, [
            'label' => 'Thumbnail width list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on view pages in pixels.',
            ],
            'help' => 'Thumbnail width on view pages in pixels.',
            'empty_data' => 32,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload2View', IntegerType::class, [
            'label' => 'Thumbnail height list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on view pages in pixels.',
            ],
            'help' => 'Thumbnail height on view pages in pixels.',
            'empty_data' => 24,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload2Display', IntegerType::class, [
            'label' => 'Thumbnail width detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on display pages in pixels.',
            ],
            'help' => 'Thumbnail width on display pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload2Display', IntegerType::class, [
            'label' => 'Thumbnail height detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on display pages in pixels.',
            ],
            'help' => 'Thumbnail height on display pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload2Edit', IntegerType::class, [
            'label' => 'Thumbnail width edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on edit pages in pixels.',
            ],
            'help' => 'Thumbnail width on edit pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload2Edit', IntegerType::class, [
            'label' => 'Thumbnail height edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on edit pages in pixels.',
            ],
            'help' => 'Thumbnail height on edit pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add($builder->create('enableShrinkingForMessageImageUpload3', CheckboxType::class, [
            'label' => 'Enable shrinking:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            ],
            'help' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => 'The enable shrinking option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add('shrinkWidthMessageImageUpload3', IntegerType::class, [
            'label' => 'Shrink width:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image width in pixels.',
            ],
            'help' => 'The maximum image width in pixels.',
            'empty_data' => 800,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink width',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('shrinkHeightMessageImageUpload3', IntegerType::class, [
            'label' => 'Shrink height:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image height in pixels.',
            ],
            'help' => 'The maximum image height in pixels.',
            'empty_data' => 600,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink height',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeMessageImageUpload3');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeMessageImageUpload3', ChoiceType::class, [
            'label' => 'Thumbnail mode:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail mode (inset or outbound).',
            ],
            'help' => 'Thumbnail mode (inset or outbound).',
            'empty_data' => 'inset',
            'attr' => [
                'class' => '',
                'title' => 'Choose the thumbnail mode.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $builder->add('thumbnailWidthMessageImageUpload3View', IntegerType::class, [
            'label' => 'Thumbnail width list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on view pages in pixels.',
            ],
            'help' => 'Thumbnail width on view pages in pixels.',
            'empty_data' => 32,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload3View', IntegerType::class, [
            'label' => 'Thumbnail height list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on view pages in pixels.',
            ],
            'help' => 'Thumbnail height on view pages in pixels.',
            'empty_data' => 24,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload3Display', IntegerType::class, [
            'label' => 'Thumbnail width detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on display pages in pixels.',
            ],
            'help' => 'Thumbnail width on display pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload3Display', IntegerType::class, [
            'label' => 'Thumbnail height detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on display pages in pixels.',
            ],
            'help' => 'Thumbnail height on display pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload3Edit', IntegerType::class, [
            'label' => 'Thumbnail width edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on edit pages in pixels.',
            ],
            'help' => 'Thumbnail width on edit pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload3Edit', IntegerType::class, [
            'label' => 'Thumbnail height edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on edit pages in pixels.',
            ],
            'help' => 'Thumbnail height on edit pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add($builder->create('enableShrinkingForMessageImageUpload4', CheckboxType::class, [
            'label' => 'Enable shrinking:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            ],
            'help' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => 'The enable shrinking option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add('shrinkWidthMessageImageUpload4', IntegerType::class, [
            'label' => 'Shrink width:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image width in pixels.',
            ],
            'help' => 'The maximum image width in pixels.',
            'empty_data' => 800,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink width',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('shrinkHeightMessageImageUpload4', IntegerType::class, [
            'label' => 'Shrink height:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image height in pixels.',
            ],
            'help' => 'The maximum image height in pixels.',
            'empty_data' => 600,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink height',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeMessageImageUpload4');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeMessageImageUpload4', ChoiceType::class, [
            'label' => 'Thumbnail mode:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail mode (inset or outbound).',
            ],
            'help' => 'Thumbnail mode (inset or outbound).',
            'empty_data' => 'inset',
            'attr' => [
                'class' => '',
                'title' => 'Choose the thumbnail mode.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
        $builder->add('thumbnailWidthMessageImageUpload4View', IntegerType::class, [
            'label' => 'Thumbnail width list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on view pages in pixels.',
            ],
            'help' => 'Thumbnail width on view pages in pixels.',
            'empty_data' => 32,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload4View', IntegerType::class, [
            'label' => 'Thumbnail height list:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on view pages in pixels.',
            ],
            'help' => 'Thumbnail height on view pages in pixels.',
            'empty_data' => 24,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height view',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload4Display', IntegerType::class, [
            'label' => 'Thumbnail width detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on display pages in pixels.',
            ],
            'help' => 'Thumbnail width on display pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload4Display', IntegerType::class, [
            'label' => 'Thumbnail height detail:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on display pages in pixels.',
            ],
            'help' => 'Thumbnail height on display pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height display',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailWidthMessageImageUpload4Edit', IntegerType::class, [
            'label' => 'Thumbnail width edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail width on edit pages in pixels.',
            ],
            'help' => 'Thumbnail width on edit pages in pixels.',
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail width edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('thumbnailHeightMessageImageUpload4Edit', IntegerType::class, [
            'label' => 'Thumbnail height edit:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail height on edit pages in pixels.',
            ],
            'help' => 'Thumbnail height on edit pages in pixels.',
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the thumbnail height edit',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add($builder->create('enableShrinkingForImageTheFile', CheckboxType::class, [
            'label' => 'Enable shrinking:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            ],
            'help' => 'Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.',
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => 'The enable shrinking option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add('shrinkWidthImageTheFile', IntegerType::class, [
            'label' => 'Shrink width:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image width in pixels.',
            ],
            'help' => 'The maximum image width in pixels.',
            'empty_data' => 800,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink width',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $builder->add('shrinkHeightImageTheFile', IntegerType::class, [
            'label' => 'Shrink height:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The maximum image height in pixels.',
            ],
            'help' => 'The maximum image height in pixels.',
            'empty_data' => 600,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => 'Enter the shrink height',
            ],
            'required' => true,
            'input_group' => ['right' => /** @Translate */'pixels'],
        ]);
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeImageTheFile');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeImageTheFile', ChoiceType::class, [
            'label' => 'Thumbnail mode:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Thumbnail mode (inset or outbound).',
            ],
            'help' => 'Thumbnail mode (inset or outbound).',
            'empty_data' => 'inset',
            'attr' => [
                'class' => '',
                'title' => 'Choose the thumbnail mode.',
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false,
        ]);
    }

    /**
     * Adds fields for moderation fields.
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('moderationGroupForMessages', EntityType::class, [
            'label' => 'Moderation group for messages:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Used to determine moderator user accounts for sending email notifications.',
            ],
            'help' => 'Used to determine moderator user accounts for sending email notifications.',
            'empty_data' => 2,
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => 'Choose the moderation group for messages',
            ],
            'required' => true,
            'class' => GroupEntity::class,
            'choice_label' => 'name',
            'choice_value' => 'gid',
        ]);
        $builder->add($builder->create('allowModerationSpecificCreatorForMessage', CheckboxType::class, [
            'label' => 'Allow moderation specific creator for message:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to allow moderators choosing a user which will be set as creator.',
            ],
            'help' => 'Whether to allow moderators choosing a user which will be set as creator.',
            'attr' => [
                'class' => '',
                'title' => 'The allow moderation specific creator for message option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
        $builder->add($builder->create('allowModerationSpecificCreationDateForMessage', CheckboxType::class, [
            'label' => 'Allow moderation specific creation date for message:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to allow moderators choosing a custom creation date.',
            ],
            'help' => 'Whether to allow moderators choosing a custom creation date.',
            'attr' => [
                'class' => '',
                'title' => 'The allow moderation specific creation date for message option',
            ],
            'required' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
    }

    /**
     * Adds fields for integration fields.
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options = []): void
    {
        $listEntries = $this->listHelper->getEntries('appSettings', 'enabledFinderTypes');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add($builder->create('enabledFinderTypes', MultiListType::class, [
            'label' => 'Enabled finder types:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Which sections are supported in the Finder component (used by Scribite plug-ins).',
            ],
            'help' => 'Which sections are supported in the Finder component (used by Scribite plug-ins).',
            'empty_data' => [],
            'attr' => [
                'class' => '',
                'title' => 'Choose the enabled finder types.',
            ],
            'required' => false,
            'placeholder' => 'Choose an option',
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => true,
            'expanded' => false,
        ])->addModelTransformer(new NullToEmptyTransformer()));
    }

    /**
     * Adds submit buttons.
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('save', SubmitType::class, [
            'label' => 'Update configuration',
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn-success',
            ],
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => 'Reset',
            'icon' => 'fa-sync',
            'attr' => [
                'formnovalidate' => 'formnovalidate',
            ],
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => 'Cancel',
            'validate' => false,
            'icon' => 'fa-times',
        ]);
    }

    public function getBlockPrefix()
    {
        return 'munewsmodule_config';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            // define class for underlying data
            'data_class' => AppSettings::class,
            'translation_domain' => 'config',
        ]);
    }
}
