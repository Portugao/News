<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use RuntimeException;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Zikula\UsersModule\Entity\UserEntity;
use MU\NewsModule\Traits\StandardFieldsTrait;
use MU\NewsModule\Validator\Constraints as NewsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for message entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractMessageEntity extends EntityAccess implements Translatable
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'message';
    
    /**
     * @var string Relative path to upload base folder
     */
    protected $_uploadBasePathRelative = '';
    
    /**
     * @var string Absolute path to upload base folder
     */
    protected $_uploadBasePathAbsolute = '';
    
    /**
     * @var string Base URL to upload files
     */
    protected $_uploadBaseUrl = '';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     *
     * @var int
     */
    protected $id = 0;
    
    /**
     * The current workflow state.
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="message", propertyName="workflowState", multiple=false)
     *
     * @var string
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     *
     * @var string
     */
    protected $title = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=20000)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="20000", allowEmptyString="false")
     *
     * @var string
     */
    protected $startText = '';
    
    /**
     * Image upload 1 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     *
     * @var array
     */
    protected $imageUpload1Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload1", length=255, nullable=true)
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     *
     * @var string
     */
    protected $imageUpload1FileName = null;
    
    /**
     * Full image upload 1 path as url.
     *
     * @Assert\Type(type="string")
     *
     * @var string
     */
    protected $imageUpload1Url = '';
    
    /**
     * Image upload 1 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     *
     * @var File
     */
    protected $imageUpload1 = null;
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=100000)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="100000", allowEmptyString="true")
     *
     * @var string
     */
    protected $mainText = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $amountOfViews = 0;
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="100", allowEmptyString="false")
     *
     * @var string
     */
    protected $author = '';
    
    /**
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid", nullable=true)
     *
     * @var UserEntity
     */
    protected $approver = null;
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="2000", allowEmptyString="true")
     *
     * @var string
     */
    protected $notes = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayOnIndex = true;
    
    /**
     * @ORM\Column(length=7, nullable=true)
     * @Assert\Length(min="0", max="7", allowEmptyString="true")
     * @Assert\Locale
     *
     * @var string
     */
    protected $messageLanguage = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $allowComments = true;
    
    /**
     * Image upload 2 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     *
     * @var array
     */
    protected $imageUpload2Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload2", length=255, nullable=true)
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     *
     * @var string
     */
    protected $imageUpload2FileName = null;
    
    /**
     * Full image upload 2 path as url.
     *
     * @Assert\Type(type="string")
     *
     * @var string
     */
    protected $imageUpload2Url = '';
    
    /**
     * Image upload 2 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     *
     * @var File
     */
    protected $imageUpload2 = null;
    
    /**
     * Image upload 3 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     *
     * @var array
     */
    protected $imageUpload3Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload3", length=255, nullable=true)
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     *
     * @var string
     */
    protected $imageUpload3FileName = null;
    
    /**
     * Full image upload 3 path as url.
     *
     * @Assert\Type(type="string")
     *
     * @var string
     */
    protected $imageUpload3Url = '';
    
    /**
     * Image upload 3 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     *
     * @var File
     */
    protected $imageUpload3 = null;
    
    /**
     * Image upload 4 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     *
     * @var array
     */
    protected $imageUpload4Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload4", length=255, nullable=true)
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     *
     * @var string
     */
    protected $imageUpload4FileName = null;
    
    /**
     * Full image upload 4 path as url.
     *
     * @Assert\Type(type="string")
     *
     * @var string
     */
    protected $imageUpload4Url = '';
    
    /**
     * Image upload 4 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     *
     * @var File
     */
    protected $imageUpload4 = null;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     *
     * @var \DateTime
     */
    protected $startDate;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $noEndDate = true;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\Expression("!value or value > this.getStartDate()", message="The start must be before the end.")
     *
     * @var \DateTime
     */
    protected $endDate;
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThan(value=100)
     *
     * @var int
     */
    protected $weight = 1;
    
    /**
     * @Gedmo\Translatable
     * @Gedmo\Slug(fields={"title"}, updatable=true, unique=true, separator="-", style="lower")
     * @ORM\Column(type="string", length=190, unique=true)
     * @Assert\Length(min="1", max="190")
     *
     * @var string
     */
    protected $slug;
    
    /**
     * Used locale to override Translation listener's locale.
     * This is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     *
     * @var string
     */
    protected $locale;
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\NewsModule\Entity\MessageAttributeEntity",
     *                mappedBy="entity", cascade={"all"},
     *                orphanRemoval=true, indexBy="name")
     *
     * @var \MU\NewsModule\Entity\MessageAttributeEntity
     */
    protected $attributes = null;
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\NewsModule\Entity\MessageCategoryEntity",
     *                mappedBy="entity", cascade={"all"},
     *                orphanRemoval=true
     * )
     *
     * @var \MU\NewsModule\Entity\MessageCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - One message [message] has many images [images] (INVERSE SIDE).
     *
     * @ORM\OneToMany(
     *     targetEntity="MU\NewsModule\Entity\ImageEntity",
     *     mappedBy="message", cascade={"persist", "remove", "detach"})
     * )
     * @ORM\JoinTable(name="mu_news_messageimages")
     * @ORM\OrderBy({"sortNumber" = "ASC"})
     *
     * @var \MU\NewsModule\Entity\ImageEntity[]
     */
    protected $images = null;
    
    /**
     * MessageEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->images = new ArrayCollection();
        $this->attributes = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): self
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    
        return $this;
    }
    
    public function get_uploadBasePathRelative(): string
    {
        return $this->_uploadBasePathRelative;
    }
    
    public function set_uploadBasePathRelative(string $_uploadBasePathRelative): self
    {
        if ($this->_uploadBasePathRelative !== $_uploadBasePathRelative) {
            $this->_uploadBasePathRelative = $_uploadBasePathRelative ?? '';
        }
    
        return $this;
    }
    
    public function get_uploadBasePathAbsolute(): string
    {
        return $this->_uploadBasePathAbsolute;
    }
    
    public function set_uploadBasePathAbsolute(string $_uploadBasePathAbsolute): self
    {
        if ($this->_uploadBasePathAbsolute !== $_uploadBasePathAbsolute) {
            $this->_uploadBasePathAbsolute = $_uploadBasePathAbsolute ?? '';
        }
    
        return $this;
    }
    
    public function get_uploadBaseUrl(): string
    {
        return $this->_uploadBaseUrl;
    }
    
    public function set_uploadBaseUrl(string $_uploadBaseUrl): self
    {
        if ($this->_uploadBaseUrl !== $_uploadBaseUrl) {
            $this->_uploadBaseUrl = $_uploadBaseUrl ?? '';
        }
    
        return $this;
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(?int $id = null): self
    {
        if ((int) $this->id !== $id) {
            $this->id = $id;
        }
    
        return $this;
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): self
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    
        return $this;
    }
    
    public function getTitle(): string
    {
        return $this->title;
    }
    
    public function setTitle(string $title): self
    {
        if ($this->title !== $title) {
            $this->title = $title ?? '';
        }
    
        return $this;
    }
    
    public function getStartText(): string
    {
        return $this->startText;
    }
    
    public function setStartText(string $startText): self
    {
        if ($this->startText !== $startText) {
            $this->startText = $startText ?? '';
        }
    
        return $this;
    }
    
    public function getImageUpload1(): ?File
    {
        if (null !== $this->imageUpload1) {
            return $this->imageUpload1;
        }
    
        $fileName = $this->imageUpload1FileName;
        if (!empty($fileName) && !$this->_uploadBasePathRelative) {
            throw new RuntimeException('Invalid upload base path in ' . static::class . '#getImageUpload1().');
        }
    
        $filePath = $this->_uploadBasePathAbsolute . 'imageupload1/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload1 = new File($filePath);
            $this->setImageUpload1Url($this->_uploadBaseUrl . '/' . $this->_uploadBasePathRelative . 'imageupload1/' . $fileName);
        } else {
            $this->setImageUpload1FileName('');
            $this->setImageUpload1Url('');
        }
    
        return $this->imageUpload1;
    }
    
    /**
     * Sets the image upload 1.
     */
    public function setImageUpload1(?File $imageUpload1 = null): void
    {
        if (null === $this->imageUpload1 && null === $imageUpload1) {
            return;
        }
        if (
            null !== $this->imageUpload1
            && null !== $imageUpload1
            && $this->imageUpload1 instanceof File
            && $this->imageUpload1->getRealPath() === $imageUpload1->getRealPath()
        ) {
            return;
        }
        $this->imageUpload1 = $imageUpload1;
    
        if (null === $this->imageUpload1 || '' === $this->imageUpload1) {
            $this->setImageUpload1FileName('');
            $this->setImageUpload1Url('');
            $this->setImageUpload1Meta([]);
        } else {
            $this->setImageUpload1FileName($this->imageUpload1->getFilename());
        }
    }
    
    public function getImageUpload1FileName(): ?string
    {
        return $this->imageUpload1FileName;
    }
    
    public function setImageUpload1FileName(?string $imageUpload1FileName = null): self
    {
        if ($this->imageUpload1FileName !== $imageUpload1FileName) {
            $this->imageUpload1FileName = $imageUpload1FileName;
        }
    
        return $this;
    }
    
    public function getImageUpload1Url(): ?string
    {
        return $this->imageUpload1Url;
    }
    
    public function setImageUpload1Url(?string $imageUpload1Url = null): self
    {
        if ($this->imageUpload1Url !== $imageUpload1Url) {
            $this->imageUpload1Url = $imageUpload1Url;
        }
    
        return $this;
    }
    
    public function getImageUpload1Meta(): array
    {
        return $this->imageUpload1Meta;
    }
    
    public function setImageUpload1Meta(array $imageUpload1Meta = []): self
    {
        if ($this->imageUpload1Meta !== $imageUpload1Meta) {
            $this->imageUpload1Meta = $imageUpload1Meta;
        }
    
        return $this;
    }
    
    public function getMainText(): string
    {
        return $this->mainText;
    }
    
    public function setMainText(string $mainText): self
    {
        if ($this->mainText !== $mainText) {
            $this->mainText = $mainText ?? '';
        }
    
        return $this;
    }
    
    public function getAmountOfViews(): int
    {
        return $this->amountOfViews;
    }
    
    public function setAmountOfViews(int $amountOfViews): self
    {
        if ((int) $this->amountOfViews !== $amountOfViews) {
            $this->amountOfViews = $amountOfViews;
        }
    
        return $this;
    }
    
    public function getAuthor(): string
    {
        return $this->author;
    }
    
    public function setAuthor(string $author): self
    {
        if ($this->author !== $author) {
            $this->author = $author ?? '';
        }
    
        return $this;
    }
    
    public function getApprover()/*: ?UserEntity*/
    {
        return $this->approver;
    }
    
    public function setApprover(/*?UserEntity */$approver = null): self
    {
        if ($this->approver !== $approver) {
            $this->approver = $approver;
        }
    
        return $this;
    }
    
    public function getNotes(): string
    {
        return $this->notes;
    }
    
    public function setNotes(string $notes): self
    {
        if ($this->notes !== $notes) {
            $this->notes = $notes ?? '';
        }
    
        return $this;
    }
    
    public function getDisplayOnIndex(): bool
    {
        return $this->displayOnIndex;
    }
    
    public function setDisplayOnIndex(bool $displayOnIndex): self
    {
        if ((bool) $this->displayOnIndex !== $displayOnIndex) {
            $this->displayOnIndex = $displayOnIndex;
        }
    
        return $this;
    }
    
    public function getMessageLanguage(): ?string
    {
        return $this->messageLanguage;
    }
    
    public function setMessageLanguage(?string $messageLanguage = null): self
    {
        if ($this->messageLanguage !== $messageLanguage) {
            $this->messageLanguage = $messageLanguage;
        }
    
        return $this;
    }
    
    public function getAllowComments(): bool
    {
        return $this->allowComments;
    }
    
    public function setAllowComments(bool $allowComments): self
    {
        if ((bool) $this->allowComments !== $allowComments) {
            $this->allowComments = $allowComments;
        }
    
        return $this;
    }
    
    public function getImageUpload2(): ?File
    {
        if (null !== $this->imageUpload2) {
            return $this->imageUpload2;
        }
    
        $fileName = $this->imageUpload2FileName;
        if (!empty($fileName) && !$this->_uploadBasePathRelative) {
            throw new RuntimeException('Invalid upload base path in ' . static::class . '#getImageUpload2().');
        }
    
        $filePath = $this->_uploadBasePathAbsolute . 'imageupload2/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload2 = new File($filePath);
            $this->setImageUpload2Url($this->_uploadBaseUrl . '/' . $this->_uploadBasePathRelative . 'imageupload2/' . $fileName);
        } else {
            $this->setImageUpload2FileName('');
            $this->setImageUpload2Url('');
        }
    
        return $this->imageUpload2;
    }
    
    /**
     * Sets the image upload 2.
     */
    public function setImageUpload2(?File $imageUpload2 = null): void
    {
        if (null === $this->imageUpload2 && null === $imageUpload2) {
            return;
        }
        if (
            null !== $this->imageUpload2
            && null !== $imageUpload2
            && $this->imageUpload2 instanceof File
            && $this->imageUpload2->getRealPath() === $imageUpload2->getRealPath()
        ) {
            return;
        }
        $this->imageUpload2 = $imageUpload2;
    
        if (null === $this->imageUpload2 || '' === $this->imageUpload2) {
            $this->setImageUpload2FileName('');
            $this->setImageUpload2Url('');
            $this->setImageUpload2Meta([]);
        } else {
            $this->setImageUpload2FileName($this->imageUpload2->getFilename());
        }
    }
    
    public function getImageUpload2FileName(): ?string
    {
        return $this->imageUpload2FileName;
    }
    
    public function setImageUpload2FileName(?string $imageUpload2FileName = null): self
    {
        if ($this->imageUpload2FileName !== $imageUpload2FileName) {
            $this->imageUpload2FileName = $imageUpload2FileName;
        }
    
        return $this;
    }
    
    public function getImageUpload2Url(): ?string
    {
        return $this->imageUpload2Url;
    }
    
    public function setImageUpload2Url(?string $imageUpload2Url = null): self
    {
        if ($this->imageUpload2Url !== $imageUpload2Url) {
            $this->imageUpload2Url = $imageUpload2Url;
        }
    
        return $this;
    }
    
    public function getImageUpload2Meta(): array
    {
        return $this->imageUpload2Meta;
    }
    
    public function setImageUpload2Meta(array $imageUpload2Meta = []): self
    {
        if ($this->imageUpload2Meta !== $imageUpload2Meta) {
            $this->imageUpload2Meta = $imageUpload2Meta;
        }
    
        return $this;
    }
    
    public function getImageUpload3(): ?File
    {
        if (null !== $this->imageUpload3) {
            return $this->imageUpload3;
        }
    
        $fileName = $this->imageUpload3FileName;
        if (!empty($fileName) && !$this->_uploadBasePathRelative) {
            throw new RuntimeException('Invalid upload base path in ' . static::class . '#getImageUpload3().');
        }
    
        $filePath = $this->_uploadBasePathAbsolute . 'imageupload3/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload3 = new File($filePath);
            $this->setImageUpload3Url($this->_uploadBaseUrl . '/' . $this->_uploadBasePathRelative . 'imageupload3/' . $fileName);
        } else {
            $this->setImageUpload3FileName('');
            $this->setImageUpload3Url('');
        }
    
        return $this->imageUpload3;
    }
    
    /**
     * Sets the image upload 3.
     */
    public function setImageUpload3(?File $imageUpload3 = null): void
    {
        if (null === $this->imageUpload3 && null === $imageUpload3) {
            return;
        }
        if (
            null !== $this->imageUpload3
            && null !== $imageUpload3
            && $this->imageUpload3 instanceof File
            && $this->imageUpload3->getRealPath() === $imageUpload3->getRealPath()
        ) {
            return;
        }
        $this->imageUpload3 = $imageUpload3;
    
        if (null === $this->imageUpload3 || '' === $this->imageUpload3) {
            $this->setImageUpload3FileName('');
            $this->setImageUpload3Url('');
            $this->setImageUpload3Meta([]);
        } else {
            $this->setImageUpload3FileName($this->imageUpload3->getFilename());
        }
    }
    
    public function getImageUpload3FileName(): ?string
    {
        return $this->imageUpload3FileName;
    }
    
    public function setImageUpload3FileName(?string $imageUpload3FileName = null): self
    {
        if ($this->imageUpload3FileName !== $imageUpload3FileName) {
            $this->imageUpload3FileName = $imageUpload3FileName;
        }
    
        return $this;
    }
    
    public function getImageUpload3Url(): ?string
    {
        return $this->imageUpload3Url;
    }
    
    public function setImageUpload3Url(?string $imageUpload3Url = null): self
    {
        if ($this->imageUpload3Url !== $imageUpload3Url) {
            $this->imageUpload3Url = $imageUpload3Url;
        }
    
        return $this;
    }
    
    public function getImageUpload3Meta(): array
    {
        return $this->imageUpload3Meta;
    }
    
    public function setImageUpload3Meta(array $imageUpload3Meta = []): self
    {
        if ($this->imageUpload3Meta !== $imageUpload3Meta) {
            $this->imageUpload3Meta = $imageUpload3Meta;
        }
    
        return $this;
    }
    
    public function getImageUpload4(): ?File
    {
        if (null !== $this->imageUpload4) {
            return $this->imageUpload4;
        }
    
        $fileName = $this->imageUpload4FileName;
        if (!empty($fileName) && !$this->_uploadBasePathRelative) {
            throw new RuntimeException('Invalid upload base path in ' . static::class . '#getImageUpload4().');
        }
    
        $filePath = $this->_uploadBasePathAbsolute . 'imageupload4/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload4 = new File($filePath);
            $this->setImageUpload4Url($this->_uploadBaseUrl . '/' . $this->_uploadBasePathRelative . 'imageupload4/' . $fileName);
        } else {
            $this->setImageUpload4FileName('');
            $this->setImageUpload4Url('');
        }
    
        return $this->imageUpload4;
    }
    
    /**
     * Sets the image upload 4.
     */
    public function setImageUpload4(?File $imageUpload4 = null): void
    {
        if (null === $this->imageUpload4 && null === $imageUpload4) {
            return;
        }
        if (
            null !== $this->imageUpload4
            && null !== $imageUpload4
            && $this->imageUpload4 instanceof File
            && $this->imageUpload4->getRealPath() === $imageUpload4->getRealPath()
        ) {
            return;
        }
        $this->imageUpload4 = $imageUpload4;
    
        if (null === $this->imageUpload4 || '' === $this->imageUpload4) {
            $this->setImageUpload4FileName('');
            $this->setImageUpload4Url('');
            $this->setImageUpload4Meta([]);
        } else {
            $this->setImageUpload4FileName($this->imageUpload4->getFilename());
        }
    }
    
    public function getImageUpload4FileName(): ?string
    {
        return $this->imageUpload4FileName;
    }
    
    public function setImageUpload4FileName(?string $imageUpload4FileName = null): self
    {
        if ($this->imageUpload4FileName !== $imageUpload4FileName) {
            $this->imageUpload4FileName = $imageUpload4FileName;
        }
    
        return $this;
    }
    
    public function getImageUpload4Url(): ?string
    {
        return $this->imageUpload4Url;
    }
    
    public function setImageUpload4Url(?string $imageUpload4Url = null): self
    {
        if ($this->imageUpload4Url !== $imageUpload4Url) {
            $this->imageUpload4Url = $imageUpload4Url;
        }
    
        return $this;
    }
    
    public function getImageUpload4Meta(): array
    {
        return $this->imageUpload4Meta;
    }
    
    public function setImageUpload4Meta(array $imageUpload4Meta = []): self
    {
        if ($this->imageUpload4Meta !== $imageUpload4Meta) {
            $this->imageUpload4Meta = $imageUpload4Meta;
        }
    
        return $this;
    }
    
    public function getStartDate(): ?\DateTimeInterface
    {
        return $this->startDate;
    }
    
    public function setStartDate(?\DateTimeInterface $startDate = null): self
    {
        if ($this->startDate !== $startDate) {
            if (
                !(null === $startDate && empty($startDate))
                && !(is_object($startDate) && $startDate instanceof \DateTimeInterface)
            ) {
                $startDate = new \DateTime($startDate);
            }
            
            if ($this->startDate !== $startDate) {
                $this->startDate = $startDate;
            }
        }
    
        return $this;
    }
    
    public function getNoEndDate(): bool
    {
        return $this->noEndDate;
    }
    
    public function setNoEndDate(bool $noEndDate): self
    {
        if ((bool) $this->noEndDate !== $noEndDate) {
            $this->noEndDate = $noEndDate;
        }
    
        return $this;
    }
    
    public function getEndDate(): ?\DateTimeInterface
    {
        return $this->endDate;
    }
    
    public function setEndDate(?\DateTimeInterface $endDate = null): self
    {
        if ($this->endDate !== $endDate) {
            if (
                !(null === $endDate && empty($endDate))
                && !(is_object($endDate) && $endDate instanceof \DateTimeInterface)
            ) {
                $endDate = new \DateTime($endDate);
            }
            
            if ($this->endDate !== $endDate) {
                $this->endDate = $endDate;
            }
        }
    
        return $this;
    }
    
    public function getWeight(): int
    {
        return $this->weight;
    }
    
    public function setWeight(int $weight): self
    {
        if ((int) $this->weight !== $weight) {
            $this->weight = $weight;
        }
    
        return $this;
    }
    
    public function getSlug(): ?string
    {
        return $this->slug;
    }
    
    public function setSlug(?string $slug = null): self
    {
        if ($this->slug !== $slug) {
            $this->slug = $slug;
        }
    
        return $this;
    }
    
    public function getLocale()
    {
        return $this->locale;
    }
    
    public function setLocale($locale = null): self
    {
        if ($this->locale !== $locale) {
            $this->locale = $locale;
        }
    
        return $this;
    }
    
    public function getAttributes(): ?Collection
    {
        return $this->attributes;
    }
    public function setAttribute(string $name, string $value): void
    {
        if (isset($this->attributes[$name])) {
            if (null === $value) {
                $this->attributes->remove($name);
            } else {
                $this->attributes[$name]->setValue($value);
            }
        } else {
            $this->attributes[$name] = new \MU\NewsModule\Entity\MessageAttributeEntity($name, $value, $this);
        }
    }
    
    
    public function getCategories(): ?Collection
    {
        return $this->categories;
    }
    
    public function setCategories(Collection $categories): void
    {
        foreach ($this->categories as $category) {
            if (false === ($key = $this->categoryCollectionContains($categories, $category))) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @return bool|int
     */
    private function categoryCollectionContains(Collection $collection, \MU\NewsModule\Entity\MessageCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \MU\NewsModule\Entity\MessageCategoryEntity $category */
            if (
                $category->getCategoryRegistryId() === $element->getCategoryRegistryId()
                && $category->getCategory() === $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    public function getImages()
    {
        return $this->images;
    }
    
    public function setImages($images = null): self
    {
        foreach ($this->images as $imageSingle) {
            $this->removeImages($imageSingle);
        }
        foreach ($images as $imageSingle) {
            $this->addImages($imageSingle);
        }
    
        return $this;
    }
    
    /**
     * Adds an instance of \MU\NewsModule\Entity\ImageEntity to the list of images.
     */
    public function addImages(\MU\NewsModule\Entity\ImageEntity $image): self
    {
        if (!$this->images->contains($image)) {
            $this->images->add($image);
            $image->setMessage($this);
        }
    
        return $this;
    }
    
    /**
     * Removes an instance of \MU\NewsModule\Entity\ImageEntity from the list of images.
     */
    public function removeImages(\MU\NewsModule\Entity\ImageEntity $image): self
    {
        if ($this->images->contains($image)) {
            $this->images->removeElement($image);
            if ($image->getMessage() === $this) {
                $image->setMessage(null);
            }
        }
    
        return $this;
    }
    
    /**
     * Checks whether the approver field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     */
    public function isApproverUserValid(): bool
    {
        return null === $this['approver'] || $this['approver'] instanceof UserEntity;
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(bool $forEditing = false): array
    {
        if (true === $forEditing) {
            return [
                'id' => $this->getId(),
                'slug' => $this->getSlug(),
            ];
        }
    
        return [
            'slug' => $this->getSlug(),
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     */
    public function supportsHookSubscribers(): bool
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     */
    public function getHookAreaPrefix(): string
    {
        return 'munewsmodule.ui_hooks.messages';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        foreach ($this->images as $rel) {
            if (!in_array($rel, $objects, true)) {
                $objects[] = $rel;
                $rel->getRelatedObjectsToPersist($objects);
            }
        }
    
        return $objects;
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Message ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a deep copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setImageUpload1(null);
        $this->setImageUpload2(null);
        $this->setImageUpload3(null);
        $this->setImageUpload4(null);
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
        // handle related objects
        // prevent shared references by doing a deep copy - see (2) and (3) for more information
        // clone referenced objects only if a new record is necessary
        $collection = $this->images;
        $this->images = new ArrayCollection();
        foreach ($collection as $rel) {
            $this->addImages(clone $rel);
        }
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    
        // clone attributes
        $attributes = $this->attributes;
        $this->attributes = new ArrayCollection();
        foreach ($attributes as $a) {
            $newAttr = clone $a;
            $this->attributes->add($newAttr);
            $newAttr->setEntity($this);
        }
    }
}
