<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use RuntimeException;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use MU\NewsModule\Traits\StandardFieldsTrait;
use MU\NewsModule\Validator\Constraints as NewsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for image entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractImageEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'image';
    
    /**
     * @var string Relative path to upload base folder
     */
    protected $_uploadBasePathRelative = '';
    
    /**
     * @var string Absolute path to upload base folder
     */
    protected $_uploadBasePathAbsolute = '';
    
    /**
     * @var string Base URL to upload files
     */
    protected $_uploadBaseUrl = '';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     *
     * @var int
     */
    protected $id = 0;
    
    /**
     * The current workflow state.
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="image", propertyName="workflowState", multiple=false)
     *
     * @var string
     */
    protected $workflowState = 'initial';
    
    /**
     * The file meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     *
     * @var array
     */
    protected $theFileMeta = [];
    
    /**
     * @ORM\Column(name="theFile", length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     *
     * @var string
     */
    protected $theFileFileName = null;
    
    /**
     * Full the file path as url.
     *
     * @Assert\Type(type="string")
     *
     * @var string
     */
    protected $theFileUrl = '';
    
    /**
     * The file file object.
     *
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     *
     * @var File
     */
    protected $theFile = null;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     *
     * @var string
     */
    protected $caption = '';
    
    /**
     * @Gedmo\SortablePosition
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\GreaterThanOrEqual(value=1)
     * @Assert\LessThan(value=10000)
     *
     * @var int
     */
    protected $sortNumber = 1;
    
    /**
     * Bidirectional - Many images [images] are linked by one message [message] (OWNING SIDE).
     *
     * @ORM\ManyToOne(
     *     targetEntity="MU\NewsModule\Entity\MessageEntity",
     *     inversedBy="images"
     * )
     * @ORM\JoinTable(name="mu_news_message")
     * @Assert\Type(type="MU\NewsModule\Entity\MessageEntity")
     *
     * @var \MU\NewsModule\Entity\MessageEntity
     */
    protected $message;
    
    /**
     * ImageEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): self
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    
        return $this;
    }
    
    public function get_uploadBasePathRelative(): string
    {
        return $this->_uploadBasePathRelative;
    }
    
    public function set_uploadBasePathRelative(string $_uploadBasePathRelative): self
    {
        if ($this->_uploadBasePathRelative !== $_uploadBasePathRelative) {
            $this->_uploadBasePathRelative = $_uploadBasePathRelative ?? '';
        }
    
        return $this;
    }
    
    public function get_uploadBasePathAbsolute(): string
    {
        return $this->_uploadBasePathAbsolute;
    }
    
    public function set_uploadBasePathAbsolute(string $_uploadBasePathAbsolute): self
    {
        if ($this->_uploadBasePathAbsolute !== $_uploadBasePathAbsolute) {
            $this->_uploadBasePathAbsolute = $_uploadBasePathAbsolute ?? '';
        }
    
        return $this;
    }
    
    public function get_uploadBaseUrl(): string
    {
        return $this->_uploadBaseUrl;
    }
    
    public function set_uploadBaseUrl(string $_uploadBaseUrl): self
    {
        if ($this->_uploadBaseUrl !== $_uploadBaseUrl) {
            $this->_uploadBaseUrl = $_uploadBaseUrl ?? '';
        }
    
        return $this;
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(?int $id = null): self
    {
        if ((int) $this->id !== $id) {
            $this->id = $id;
        }
    
        return $this;
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): self
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    
        return $this;
    }
    
    public function getTheFile(): ?File
    {
        if (null !== $this->theFile) {
            return $this->theFile;
        }
    
        $fileName = $this->theFileFileName;
        if (!empty($fileName) && !$this->_uploadBasePathRelative) {
            throw new RuntimeException('Invalid upload base path in ' . static::class . '#getTheFile().');
        }
    
        $filePath = $this->_uploadBasePathAbsolute . 'thefile/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->theFile = new File($filePath);
            $this->setTheFileUrl($this->_uploadBaseUrl . '/' . $this->_uploadBasePathRelative . 'thefile/' . $fileName);
        } else {
            $this->setTheFileFileName('');
            $this->setTheFileUrl('');
        }
    
        return $this->theFile;
    }
    
    /**
     * Sets the the file.
     */
    public function setTheFile(?File $theFile = null): void
    {
        if (null === $this->theFile && null === $theFile) {
            return;
        }
        if (
            null !== $this->theFile
            && null !== $theFile
            && $this->theFile instanceof File
            && $this->theFile->getRealPath() === $theFile->getRealPath()
        ) {
            return;
        }
        $this->theFile = $theFile ?? '';
    
        if (null === $this->theFile || '' === $this->theFile) {
            $this->setTheFileFileName('');
            $this->setTheFileUrl('');
            $this->setTheFileMeta([]);
        } else {
            $this->setTheFileFileName($this->theFile->getFilename());
        }
    }
    
    public function getTheFileFileName(): ?string
    {
        return $this->theFileFileName;
    }
    
    public function setTheFileFileName(?string $theFileFileName = null): self
    {
        if ($this->theFileFileName !== $theFileFileName) {
            $this->theFileFileName = $theFileFileName ?? '';
        }
    
        return $this;
    }
    
    public function getTheFileUrl(): ?string
    {
        return $this->theFileUrl;
    }
    
    public function setTheFileUrl(?string $theFileUrl = null): self
    {
        if ($this->theFileUrl !== $theFileUrl) {
            $this->theFileUrl = $theFileUrl ?? '';
        }
    
        return $this;
    }
    
    public function getTheFileMeta(): array
    {
        return $this->theFileMeta;
    }
    
    public function setTheFileMeta(array $theFileMeta = []): self
    {
        if ($this->theFileMeta !== $theFileMeta) {
            $this->theFileMeta = $theFileMeta ?? '';
        }
    
        return $this;
    }
    
    public function getCaption(): string
    {
        return $this->caption;
    }
    
    public function setCaption(string $caption): self
    {
        if ($this->caption !== $caption) {
            $this->caption = $caption ?? '';
        }
    
        return $this;
    }
    
    public function getSortNumber(): int
    {
        return $this->sortNumber;
    }
    
    public function setSortNumber(int $sortNumber): self
    {
        if ((int) $this->sortNumber !== $sortNumber) {
            $this->sortNumber = $sortNumber;
        }
    
        return $this;
    }
    
    public function getMessage(): ?\MU\NewsModule\Entity\MessageEntity
    {
        return $this->message;
    }
    
    public function setMessage(?\MU\NewsModule\Entity\MessageEntity $message = null): self
    {
        $this->message = $message;
    
        return $this;
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(): array
    {
        return [
            'id' => $this->getId(),
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     */
    public function supportsHookSubscribers(): bool
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     */
    public function getHookAreaPrefix(): string
    {
        return 'munewsmodule.ui_hooks.images';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Image ' . $this->getKey() . ': ' . $this->getCaption();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setTheFile(null);
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    }
}
