<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\NewsModule\Validator\Constraints as NewsAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableAttribution = false;
    
    /**
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableMultiLanguage = false;
    
    /**
     * This setting allows to enable the display of author informations within an article.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $showAuthor = false;
    
    /**
     * This setting allows to enable the display of date informations within an article.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $showDate = false;
    
    /**
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableCategorization = false;
    
    /**
     * You can customise several display-oriented aspects of the articles.
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="defaultMessageSorting", multiple=false)
     *
     * @var string
     */
    protected $defaultMessageSorting = 'articledatetime';
    
    /**
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="defaultMessageSortingBackend", multiple=false)
     *
     * @var string
     */
    protected $defaultMessageSortingBackend = 'articledatetime';
    
    /**
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="sortingDirection", multiple=false)
     *
     * @var string
     */
    protected $sortingDirection = 'descending';
    
    /**
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableMoreMessagesInCategory = false;
    
    /**
     * When displaying an article, a number of additional article titles in the same category can be shown. To show the additional article titles for every article set the value above to a number larger than 0. When the value is set to 0, the number of additional article titles can be set per article by means of the article attribute \'morearticlesincat\'. You need to enable \'article attributes\' yourself. When the setting above or the article attribute is set to 0, no titles will be extracted from the database.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $amountOfMoreArticlesInCategory = 0;
    
    /**
     * Display a PDF link for the articles in the index page.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayPdfLink = false;
    
    /**
     * Allow uploading article pictures.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enablePictureUpload = false;
    
    /**
     * Image float on the view page.
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="imageFloatOnViewPage", multiple=false)
     *
     * @var string
     */
    protected $imageFloatOnViewPage = 'left';
    
    /**
     * Image float on the article display page.
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="imageFloatOnDisplayPage", multiple=false)
     *
     * @var string
     */
    protected $imageFloatOnDisplayPage = 'left';
    
    /**
     * For example: 4000 (byte), 100k (kilobyte) and 1M (megabyte).
     *
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     *
     * @var string
     */
    protected $maxSize = '200k';
    
    /**
     * The amount of messages shown per page.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $messageEntriesPerPage = 10;
    
    /**
     * Whether to add a link to messages of the current user on his account page.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $linkOwnMessagesOnAccountPage = true;
    
    /**
     * Whether only own entries should be shown on view pages by default or not.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether automatically filter data in the frontend based on the current locale or not.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $filterDataByLocale = false;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableShrinkingForMessageImageUpload1 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkWidthMessageImageUpload1 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkHeightMessageImageUpload1 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload1", multiple=false)
     *
     * @var string
     */
    protected $thumbnailModeMessageImageUpload1 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload1View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload1View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload1Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload1Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload1Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload1Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableShrinkingForMessageImageUpload2 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkWidthMessageImageUpload2 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkHeightMessageImageUpload2 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload2", multiple=false)
     *
     * @var string
     */
    protected $thumbnailModeMessageImageUpload2 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload2View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload2View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload2Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload2Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload2Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload2Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableShrinkingForMessageImageUpload3 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkWidthMessageImageUpload3 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkHeightMessageImageUpload3 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload3", multiple=false)
     *
     * @var string
     */
    protected $thumbnailModeMessageImageUpload3 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload3View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload3View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload3Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload3Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload3Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload3Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableShrinkingForMessageImageUpload4 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkWidthMessageImageUpload4 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkHeightMessageImageUpload4 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload4", multiple=false)
     *
     * @var string
     */
    protected $thumbnailModeMessageImageUpload4 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload4View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload4View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload4Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload4Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailWidthMessageImageUpload4Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $thumbnailHeightMessageImageUpload4Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableShrinkingForImageTheFile = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkWidthImageTheFile = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $shrinkHeightImageTheFile = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeImageTheFile", multiple=false)
     *
     * @var string
     */
    protected $thumbnailModeImageTheFile = 'inset';
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank
     *
     * @var int
     */
    protected $moderationGroupForMessages = 2;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $allowModerationSpecificCreatorForMessage = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $allowModerationSpecificCreationDateForMessage = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     *
     * @var string
     */
    protected $enabledFinderTypes = 'message###image';
    
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    public function getEnableAttribution(): bool
    {
        return $this->enableAttribution;
    }
    
    public function setEnableAttribution(bool $enableAttribution): self
    {
        if ((bool) $this->enableAttribution !== $enableAttribution) {
            $this->enableAttribution = $enableAttribution;
        }
    
        return $this;
    }
    
    public function getEnableMultiLanguage(): bool
    {
        return $this->enableMultiLanguage;
    }
    
    public function setEnableMultiLanguage(bool $enableMultiLanguage): self
    {
        if ((bool) $this->enableMultiLanguage !== $enableMultiLanguage) {
            $this->enableMultiLanguage = $enableMultiLanguage;
        }
    
        return $this;
    }
    
    public function getShowAuthor(): bool
    {
        return $this->showAuthor;
    }
    
    public function setShowAuthor(bool $showAuthor): self
    {
        if ((bool) $this->showAuthor !== $showAuthor) {
            $this->showAuthor = $showAuthor;
        }
    
        return $this;
    }
    
    public function getShowDate(): bool
    {
        return $this->showDate;
    }
    
    public function setShowDate(bool $showDate): self
    {
        if ((bool) $this->showDate !== $showDate) {
            $this->showDate = $showDate;
        }
    
        return $this;
    }
    
    public function getEnableCategorization(): bool
    {
        return $this->enableCategorization;
    }
    
    public function setEnableCategorization(bool $enableCategorization): self
    {
        if ((bool) $this->enableCategorization !== $enableCategorization) {
            $this->enableCategorization = $enableCategorization;
        }
    
        return $this;
    }
    
    public function getDefaultMessageSorting(): string
    {
        return $this->defaultMessageSorting;
    }
    
    public function setDefaultMessageSorting(string $defaultMessageSorting): self
    {
        if ($this->defaultMessageSorting !== $defaultMessageSorting) {
            $this->defaultMessageSorting = $defaultMessageSorting ?? '';
        }
    
        return $this;
    }
    
    public function getDefaultMessageSortingBackend(): string
    {
        return $this->defaultMessageSortingBackend;
    }
    
    public function setDefaultMessageSortingBackend(string $defaultMessageSortingBackend): self
    {
        if ($this->defaultMessageSortingBackend !== $defaultMessageSortingBackend) {
            $this->defaultMessageSortingBackend = $defaultMessageSortingBackend ?? '';
        }
    
        return $this;
    }
    
    public function getSortingDirection(): string
    {
        return $this->sortingDirection;
    }
    
    public function setSortingDirection(string $sortingDirection): self
    {
        if ($this->sortingDirection !== $sortingDirection) {
            $this->sortingDirection = $sortingDirection ?? '';
        }
    
        return $this;
    }
    
    public function getEnableMoreMessagesInCategory(): bool
    {
        return $this->enableMoreMessagesInCategory;
    }
    
    public function setEnableMoreMessagesInCategory(bool $enableMoreMessagesInCategory): self
    {
        if ((bool) $this->enableMoreMessagesInCategory !== $enableMoreMessagesInCategory) {
            $this->enableMoreMessagesInCategory = $enableMoreMessagesInCategory;
        }
    
        return $this;
    }
    
    public function getAmountOfMoreArticlesInCategory(): int
    {
        return $this->amountOfMoreArticlesInCategory;
    }
    
    public function setAmountOfMoreArticlesInCategory(int $amountOfMoreArticlesInCategory): self
    {
        if ((int) $this->amountOfMoreArticlesInCategory !== $amountOfMoreArticlesInCategory) {
            $this->amountOfMoreArticlesInCategory = $amountOfMoreArticlesInCategory;
        }
    
        return $this;
    }
    
    public function getDisplayPdfLink(): bool
    {
        return $this->displayPdfLink;
    }
    
    public function setDisplayPdfLink(bool $displayPdfLink): self
    {
        if ((bool) $this->displayPdfLink !== $displayPdfLink) {
            $this->displayPdfLink = $displayPdfLink;
        }
    
        return $this;
    }
    
    public function getEnablePictureUpload(): bool
    {
        return $this->enablePictureUpload;
    }
    
    public function setEnablePictureUpload(bool $enablePictureUpload): self
    {
        if ((bool) $this->enablePictureUpload !== $enablePictureUpload) {
            $this->enablePictureUpload = $enablePictureUpload;
        }
    
        return $this;
    }
    
    public function getImageFloatOnViewPage(): string
    {
        return $this->imageFloatOnViewPage;
    }
    
    public function setImageFloatOnViewPage(string $imageFloatOnViewPage): self
    {
        if ($this->imageFloatOnViewPage !== $imageFloatOnViewPage) {
            $this->imageFloatOnViewPage = $imageFloatOnViewPage ?? '';
        }
    
        return $this;
    }
    
    public function getImageFloatOnDisplayPage(): string
    {
        return $this->imageFloatOnDisplayPage;
    }
    
    public function setImageFloatOnDisplayPage(string $imageFloatOnDisplayPage): self
    {
        if ($this->imageFloatOnDisplayPage !== $imageFloatOnDisplayPage) {
            $this->imageFloatOnDisplayPage = $imageFloatOnDisplayPage ?? '';
        }
    
        return $this;
    }
    
    public function getMaxSize(): string
    {
        return $this->maxSize;
    }
    
    public function setMaxSize(string $maxSize): self
    {
        if ($this->maxSize !== $maxSize) {
            $this->maxSize = $maxSize ?? '';
        }
    
        return $this;
    }
    
    public function getMessageEntriesPerPage(): int
    {
        return $this->messageEntriesPerPage;
    }
    
    public function setMessageEntriesPerPage(int $messageEntriesPerPage): self
    {
        if ((int) $this->messageEntriesPerPage !== $messageEntriesPerPage) {
            $this->messageEntriesPerPage = $messageEntriesPerPage;
        }
    
        return $this;
    }
    
    public function getLinkOwnMessagesOnAccountPage(): bool
    {
        return $this->linkOwnMessagesOnAccountPage;
    }
    
    public function setLinkOwnMessagesOnAccountPage(bool $linkOwnMessagesOnAccountPage): self
    {
        if ((bool) $this->linkOwnMessagesOnAccountPage !== $linkOwnMessagesOnAccountPage) {
            $this->linkOwnMessagesOnAccountPage = $linkOwnMessagesOnAccountPage;
        }
    
        return $this;
    }
    
    public function getShowOnlyOwnEntries(): bool
    {
        return $this->showOnlyOwnEntries;
    }
    
    public function setShowOnlyOwnEntries(bool $showOnlyOwnEntries): self
    {
        if ((bool) $this->showOnlyOwnEntries !== $showOnlyOwnEntries) {
            $this->showOnlyOwnEntries = $showOnlyOwnEntries;
        }
    
        return $this;
    }
    
    public function getFilterDataByLocale(): bool
    {
        return $this->filterDataByLocale;
    }
    
    public function setFilterDataByLocale(bool $filterDataByLocale): self
    {
        if ((bool) $this->filterDataByLocale !== $filterDataByLocale) {
            $this->filterDataByLocale = $filterDataByLocale;
        }
    
        return $this;
    }
    
    public function getEnableShrinkingForMessageImageUpload1(): bool
    {
        return $this->enableShrinkingForMessageImageUpload1;
    }
    
    public function setEnableShrinkingForMessageImageUpload1(bool $enableShrinkingForMessageImageUpload1): self
    {
        if ((bool) $this->enableShrinkingForMessageImageUpload1 !== $enableShrinkingForMessageImageUpload1) {
            $this->enableShrinkingForMessageImageUpload1 = $enableShrinkingForMessageImageUpload1;
        }
    
        return $this;
    }
    
    public function getShrinkWidthMessageImageUpload1(): int
    {
        return $this->shrinkWidthMessageImageUpload1;
    }
    
    public function setShrinkWidthMessageImageUpload1(int $shrinkWidthMessageImageUpload1): self
    {
        if ((int) $this->shrinkWidthMessageImageUpload1 !== $shrinkWidthMessageImageUpload1) {
            $this->shrinkWidthMessageImageUpload1 = $shrinkWidthMessageImageUpload1;
        }
    
        return $this;
    }
    
    public function getShrinkHeightMessageImageUpload1(): int
    {
        return $this->shrinkHeightMessageImageUpload1;
    }
    
    public function setShrinkHeightMessageImageUpload1(int $shrinkHeightMessageImageUpload1): self
    {
        if ((int) $this->shrinkHeightMessageImageUpload1 !== $shrinkHeightMessageImageUpload1) {
            $this->shrinkHeightMessageImageUpload1 = $shrinkHeightMessageImageUpload1;
        }
    
        return $this;
    }
    
    public function getThumbnailModeMessageImageUpload1(): string
    {
        return $this->thumbnailModeMessageImageUpload1;
    }
    
    public function setThumbnailModeMessageImageUpload1(string $thumbnailModeMessageImageUpload1): self
    {
        if ($this->thumbnailModeMessageImageUpload1 !== $thumbnailModeMessageImageUpload1) {
            $this->thumbnailModeMessageImageUpload1 = $thumbnailModeMessageImageUpload1 ?? '';
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload1View(): int
    {
        return $this->thumbnailWidthMessageImageUpload1View;
    }
    
    public function setThumbnailWidthMessageImageUpload1View(int $thumbnailWidthMessageImageUpload1View): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload1View !== $thumbnailWidthMessageImageUpload1View) {
            $this->thumbnailWidthMessageImageUpload1View = $thumbnailWidthMessageImageUpload1View;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload1View(): int
    {
        return $this->thumbnailHeightMessageImageUpload1View;
    }
    
    public function setThumbnailHeightMessageImageUpload1View(int $thumbnailHeightMessageImageUpload1View): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload1View !== $thumbnailHeightMessageImageUpload1View) {
            $this->thumbnailHeightMessageImageUpload1View = $thumbnailHeightMessageImageUpload1View;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload1Display(): int
    {
        return $this->thumbnailWidthMessageImageUpload1Display;
    }
    
    public function setThumbnailWidthMessageImageUpload1Display(int $thumbnailWidthMessageImageUpload1Display): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload1Display !== $thumbnailWidthMessageImageUpload1Display) {
            $this->thumbnailWidthMessageImageUpload1Display = $thumbnailWidthMessageImageUpload1Display;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload1Display(): int
    {
        return $this->thumbnailHeightMessageImageUpload1Display;
    }
    
    public function setThumbnailHeightMessageImageUpload1Display(int $thumbnailHeightMessageImageUpload1Display): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload1Display !== $thumbnailHeightMessageImageUpload1Display) {
            $this->thumbnailHeightMessageImageUpload1Display = $thumbnailHeightMessageImageUpload1Display;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload1Edit(): int
    {
        return $this->thumbnailWidthMessageImageUpload1Edit;
    }
    
    public function setThumbnailWidthMessageImageUpload1Edit(int $thumbnailWidthMessageImageUpload1Edit): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload1Edit !== $thumbnailWidthMessageImageUpload1Edit) {
            $this->thumbnailWidthMessageImageUpload1Edit = $thumbnailWidthMessageImageUpload1Edit;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload1Edit(): int
    {
        return $this->thumbnailHeightMessageImageUpload1Edit;
    }
    
    public function setThumbnailHeightMessageImageUpload1Edit(int $thumbnailHeightMessageImageUpload1Edit): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload1Edit !== $thumbnailHeightMessageImageUpload1Edit) {
            $this->thumbnailHeightMessageImageUpload1Edit = $thumbnailHeightMessageImageUpload1Edit;
        }
    
        return $this;
    }
    
    public function getEnableShrinkingForMessageImageUpload2(): bool
    {
        return $this->enableShrinkingForMessageImageUpload2;
    }
    
    public function setEnableShrinkingForMessageImageUpload2(bool $enableShrinkingForMessageImageUpload2): self
    {
        if ((bool) $this->enableShrinkingForMessageImageUpload2 !== $enableShrinkingForMessageImageUpload2) {
            $this->enableShrinkingForMessageImageUpload2 = $enableShrinkingForMessageImageUpload2;
        }
    
        return $this;
    }
    
    public function getShrinkWidthMessageImageUpload2(): int
    {
        return $this->shrinkWidthMessageImageUpload2;
    }
    
    public function setShrinkWidthMessageImageUpload2(int $shrinkWidthMessageImageUpload2): self
    {
        if ((int) $this->shrinkWidthMessageImageUpload2 !== $shrinkWidthMessageImageUpload2) {
            $this->shrinkWidthMessageImageUpload2 = $shrinkWidthMessageImageUpload2;
        }
    
        return $this;
    }
    
    public function getShrinkHeightMessageImageUpload2(): int
    {
        return $this->shrinkHeightMessageImageUpload2;
    }
    
    public function setShrinkHeightMessageImageUpload2(int $shrinkHeightMessageImageUpload2): self
    {
        if ((int) $this->shrinkHeightMessageImageUpload2 !== $shrinkHeightMessageImageUpload2) {
            $this->shrinkHeightMessageImageUpload2 = $shrinkHeightMessageImageUpload2;
        }
    
        return $this;
    }
    
    public function getThumbnailModeMessageImageUpload2(): string
    {
        return $this->thumbnailModeMessageImageUpload2;
    }
    
    public function setThumbnailModeMessageImageUpload2(string $thumbnailModeMessageImageUpload2): self
    {
        if ($this->thumbnailModeMessageImageUpload2 !== $thumbnailModeMessageImageUpload2) {
            $this->thumbnailModeMessageImageUpload2 = $thumbnailModeMessageImageUpload2 ?? '';
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload2View(): int
    {
        return $this->thumbnailWidthMessageImageUpload2View;
    }
    
    public function setThumbnailWidthMessageImageUpload2View(int $thumbnailWidthMessageImageUpload2View): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload2View !== $thumbnailWidthMessageImageUpload2View) {
            $this->thumbnailWidthMessageImageUpload2View = $thumbnailWidthMessageImageUpload2View;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload2View(): int
    {
        return $this->thumbnailHeightMessageImageUpload2View;
    }
    
    public function setThumbnailHeightMessageImageUpload2View(int $thumbnailHeightMessageImageUpload2View): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload2View !== $thumbnailHeightMessageImageUpload2View) {
            $this->thumbnailHeightMessageImageUpload2View = $thumbnailHeightMessageImageUpload2View;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload2Display(): int
    {
        return $this->thumbnailWidthMessageImageUpload2Display;
    }
    
    public function setThumbnailWidthMessageImageUpload2Display(int $thumbnailWidthMessageImageUpload2Display): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload2Display !== $thumbnailWidthMessageImageUpload2Display) {
            $this->thumbnailWidthMessageImageUpload2Display = $thumbnailWidthMessageImageUpload2Display;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload2Display(): int
    {
        return $this->thumbnailHeightMessageImageUpload2Display;
    }
    
    public function setThumbnailHeightMessageImageUpload2Display(int $thumbnailHeightMessageImageUpload2Display): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload2Display !== $thumbnailHeightMessageImageUpload2Display) {
            $this->thumbnailHeightMessageImageUpload2Display = $thumbnailHeightMessageImageUpload2Display;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload2Edit(): int
    {
        return $this->thumbnailWidthMessageImageUpload2Edit;
    }
    
    public function setThumbnailWidthMessageImageUpload2Edit(int $thumbnailWidthMessageImageUpload2Edit): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload2Edit !== $thumbnailWidthMessageImageUpload2Edit) {
            $this->thumbnailWidthMessageImageUpload2Edit = $thumbnailWidthMessageImageUpload2Edit;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload2Edit(): int
    {
        return $this->thumbnailHeightMessageImageUpload2Edit;
    }
    
    public function setThumbnailHeightMessageImageUpload2Edit(int $thumbnailHeightMessageImageUpload2Edit): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload2Edit !== $thumbnailHeightMessageImageUpload2Edit) {
            $this->thumbnailHeightMessageImageUpload2Edit = $thumbnailHeightMessageImageUpload2Edit;
        }
    
        return $this;
    }
    
    public function getEnableShrinkingForMessageImageUpload3(): bool
    {
        return $this->enableShrinkingForMessageImageUpload3;
    }
    
    public function setEnableShrinkingForMessageImageUpload3(bool $enableShrinkingForMessageImageUpload3): self
    {
        if ((bool) $this->enableShrinkingForMessageImageUpload3 !== $enableShrinkingForMessageImageUpload3) {
            $this->enableShrinkingForMessageImageUpload3 = $enableShrinkingForMessageImageUpload3;
        }
    
        return $this;
    }
    
    public function getShrinkWidthMessageImageUpload3(): int
    {
        return $this->shrinkWidthMessageImageUpload3;
    }
    
    public function setShrinkWidthMessageImageUpload3(int $shrinkWidthMessageImageUpload3): self
    {
        if ((int) $this->shrinkWidthMessageImageUpload3 !== $shrinkWidthMessageImageUpload3) {
            $this->shrinkWidthMessageImageUpload3 = $shrinkWidthMessageImageUpload3;
        }
    
        return $this;
    }
    
    public function getShrinkHeightMessageImageUpload3(): int
    {
        return $this->shrinkHeightMessageImageUpload3;
    }
    
    public function setShrinkHeightMessageImageUpload3(int $shrinkHeightMessageImageUpload3): self
    {
        if ((int) $this->shrinkHeightMessageImageUpload3 !== $shrinkHeightMessageImageUpload3) {
            $this->shrinkHeightMessageImageUpload3 = $shrinkHeightMessageImageUpload3;
        }
    
        return $this;
    }
    
    public function getThumbnailModeMessageImageUpload3(): string
    {
        return $this->thumbnailModeMessageImageUpload3;
    }
    
    public function setThumbnailModeMessageImageUpload3(string $thumbnailModeMessageImageUpload3): self
    {
        if ($this->thumbnailModeMessageImageUpload3 !== $thumbnailModeMessageImageUpload3) {
            $this->thumbnailModeMessageImageUpload3 = $thumbnailModeMessageImageUpload3 ?? '';
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload3View(): int
    {
        return $this->thumbnailWidthMessageImageUpload3View;
    }
    
    public function setThumbnailWidthMessageImageUpload3View(int $thumbnailWidthMessageImageUpload3View): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload3View !== $thumbnailWidthMessageImageUpload3View) {
            $this->thumbnailWidthMessageImageUpload3View = $thumbnailWidthMessageImageUpload3View;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload3View(): int
    {
        return $this->thumbnailHeightMessageImageUpload3View;
    }
    
    public function setThumbnailHeightMessageImageUpload3View(int $thumbnailHeightMessageImageUpload3View): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload3View !== $thumbnailHeightMessageImageUpload3View) {
            $this->thumbnailHeightMessageImageUpload3View = $thumbnailHeightMessageImageUpload3View;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload3Display(): int
    {
        return $this->thumbnailWidthMessageImageUpload3Display;
    }
    
    public function setThumbnailWidthMessageImageUpload3Display(int $thumbnailWidthMessageImageUpload3Display): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload3Display !== $thumbnailWidthMessageImageUpload3Display) {
            $this->thumbnailWidthMessageImageUpload3Display = $thumbnailWidthMessageImageUpload3Display;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload3Display(): int
    {
        return $this->thumbnailHeightMessageImageUpload3Display;
    }
    
    public function setThumbnailHeightMessageImageUpload3Display(int $thumbnailHeightMessageImageUpload3Display): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload3Display !== $thumbnailHeightMessageImageUpload3Display) {
            $this->thumbnailHeightMessageImageUpload3Display = $thumbnailHeightMessageImageUpload3Display;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload3Edit(): int
    {
        return $this->thumbnailWidthMessageImageUpload3Edit;
    }
    
    public function setThumbnailWidthMessageImageUpload3Edit(int $thumbnailWidthMessageImageUpload3Edit): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload3Edit !== $thumbnailWidthMessageImageUpload3Edit) {
            $this->thumbnailWidthMessageImageUpload3Edit = $thumbnailWidthMessageImageUpload3Edit;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload3Edit(): int
    {
        return $this->thumbnailHeightMessageImageUpload3Edit;
    }
    
    public function setThumbnailHeightMessageImageUpload3Edit(int $thumbnailHeightMessageImageUpload3Edit): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload3Edit !== $thumbnailHeightMessageImageUpload3Edit) {
            $this->thumbnailHeightMessageImageUpload3Edit = $thumbnailHeightMessageImageUpload3Edit;
        }
    
        return $this;
    }
    
    public function getEnableShrinkingForMessageImageUpload4(): bool
    {
        return $this->enableShrinkingForMessageImageUpload4;
    }
    
    public function setEnableShrinkingForMessageImageUpload4(bool $enableShrinkingForMessageImageUpload4): self
    {
        if ((bool) $this->enableShrinkingForMessageImageUpload4 !== $enableShrinkingForMessageImageUpload4) {
            $this->enableShrinkingForMessageImageUpload4 = $enableShrinkingForMessageImageUpload4;
        }
    
        return $this;
    }
    
    public function getShrinkWidthMessageImageUpload4(): int
    {
        return $this->shrinkWidthMessageImageUpload4;
    }
    
    public function setShrinkWidthMessageImageUpload4(int $shrinkWidthMessageImageUpload4): self
    {
        if ((int) $this->shrinkWidthMessageImageUpload4 !== $shrinkWidthMessageImageUpload4) {
            $this->shrinkWidthMessageImageUpload4 = $shrinkWidthMessageImageUpload4;
        }
    
        return $this;
    }
    
    public function getShrinkHeightMessageImageUpload4(): int
    {
        return $this->shrinkHeightMessageImageUpload4;
    }
    
    public function setShrinkHeightMessageImageUpload4(int $shrinkHeightMessageImageUpload4): self
    {
        if ((int) $this->shrinkHeightMessageImageUpload4 !== $shrinkHeightMessageImageUpload4) {
            $this->shrinkHeightMessageImageUpload4 = $shrinkHeightMessageImageUpload4;
        }
    
        return $this;
    }
    
    public function getThumbnailModeMessageImageUpload4(): string
    {
        return $this->thumbnailModeMessageImageUpload4;
    }
    
    public function setThumbnailModeMessageImageUpload4(string $thumbnailModeMessageImageUpload4): self
    {
        if ($this->thumbnailModeMessageImageUpload4 !== $thumbnailModeMessageImageUpload4) {
            $this->thumbnailModeMessageImageUpload4 = $thumbnailModeMessageImageUpload4 ?? '';
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload4View(): int
    {
        return $this->thumbnailWidthMessageImageUpload4View;
    }
    
    public function setThumbnailWidthMessageImageUpload4View(int $thumbnailWidthMessageImageUpload4View): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload4View !== $thumbnailWidthMessageImageUpload4View) {
            $this->thumbnailWidthMessageImageUpload4View = $thumbnailWidthMessageImageUpload4View;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload4View(): int
    {
        return $this->thumbnailHeightMessageImageUpload4View;
    }
    
    public function setThumbnailHeightMessageImageUpload4View(int $thumbnailHeightMessageImageUpload4View): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload4View !== $thumbnailHeightMessageImageUpload4View) {
            $this->thumbnailHeightMessageImageUpload4View = $thumbnailHeightMessageImageUpload4View;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload4Display(): int
    {
        return $this->thumbnailWidthMessageImageUpload4Display;
    }
    
    public function setThumbnailWidthMessageImageUpload4Display(int $thumbnailWidthMessageImageUpload4Display): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload4Display !== $thumbnailWidthMessageImageUpload4Display) {
            $this->thumbnailWidthMessageImageUpload4Display = $thumbnailWidthMessageImageUpload4Display;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload4Display(): int
    {
        return $this->thumbnailHeightMessageImageUpload4Display;
    }
    
    public function setThumbnailHeightMessageImageUpload4Display(int $thumbnailHeightMessageImageUpload4Display): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload4Display !== $thumbnailHeightMessageImageUpload4Display) {
            $this->thumbnailHeightMessageImageUpload4Display = $thumbnailHeightMessageImageUpload4Display;
        }
    
        return $this;
    }
    
    public function getThumbnailWidthMessageImageUpload4Edit(): int
    {
        return $this->thumbnailWidthMessageImageUpload4Edit;
    }
    
    public function setThumbnailWidthMessageImageUpload4Edit(int $thumbnailWidthMessageImageUpload4Edit): self
    {
        if ((int) $this->thumbnailWidthMessageImageUpload4Edit !== $thumbnailWidthMessageImageUpload4Edit) {
            $this->thumbnailWidthMessageImageUpload4Edit = $thumbnailWidthMessageImageUpload4Edit;
        }
    
        return $this;
    }
    
    public function getThumbnailHeightMessageImageUpload4Edit(): int
    {
        return $this->thumbnailHeightMessageImageUpload4Edit;
    }
    
    public function setThumbnailHeightMessageImageUpload4Edit(int $thumbnailHeightMessageImageUpload4Edit): self
    {
        if ((int) $this->thumbnailHeightMessageImageUpload4Edit !== $thumbnailHeightMessageImageUpload4Edit) {
            $this->thumbnailHeightMessageImageUpload4Edit = $thumbnailHeightMessageImageUpload4Edit;
        }
    
        return $this;
    }
    
    public function getEnableShrinkingForImageTheFile(): bool
    {
        return $this->enableShrinkingForImageTheFile;
    }
    
    public function setEnableShrinkingForImageTheFile(bool $enableShrinkingForImageTheFile): self
    {
        if ((bool) $this->enableShrinkingForImageTheFile !== $enableShrinkingForImageTheFile) {
            $this->enableShrinkingForImageTheFile = $enableShrinkingForImageTheFile;
        }
    
        return $this;
    }
    
    public function getShrinkWidthImageTheFile(): int
    {
        return $this->shrinkWidthImageTheFile;
    }
    
    public function setShrinkWidthImageTheFile(int $shrinkWidthImageTheFile): self
    {
        if ((int) $this->shrinkWidthImageTheFile !== $shrinkWidthImageTheFile) {
            $this->shrinkWidthImageTheFile = $shrinkWidthImageTheFile;
        }
    
        return $this;
    }
    
    public function getShrinkHeightImageTheFile(): int
    {
        return $this->shrinkHeightImageTheFile;
    }
    
    public function setShrinkHeightImageTheFile(int $shrinkHeightImageTheFile): self
    {
        if ((int) $this->shrinkHeightImageTheFile !== $shrinkHeightImageTheFile) {
            $this->shrinkHeightImageTheFile = $shrinkHeightImageTheFile;
        }
    
        return $this;
    }
    
    public function getThumbnailModeImageTheFile(): string
    {
        return $this->thumbnailModeImageTheFile;
    }
    
    public function setThumbnailModeImageTheFile(string $thumbnailModeImageTheFile): self
    {
        if ($this->thumbnailModeImageTheFile !== $thumbnailModeImageTheFile) {
            $this->thumbnailModeImageTheFile = $thumbnailModeImageTheFile ?? '';
        }
    
        return $this;
    }
    
    public function getModerationGroupForMessages()/*: int*/
    {
        return $this->moderationGroupForMessages;
    }
    
    public function setModerationGroupForMessages(/*int */$moderationGroupForMessages): self
    {
        if ($this->moderationGroupForMessages !== $moderationGroupForMessages) {
            $this->moderationGroupForMessages = $moderationGroupForMessages;
        }
    
        return $this;
    }
    
    public function getAllowModerationSpecificCreatorForMessage(): bool
    {
        return $this->allowModerationSpecificCreatorForMessage;
    }
    
    public function setAllowModerationSpecificCreatorForMessage(bool $allowModerationSpecificCreatorForMessage): self
    {
        if ((bool) $this->allowModerationSpecificCreatorForMessage !== $allowModerationSpecificCreatorForMessage) {
            $this->allowModerationSpecificCreatorForMessage = $allowModerationSpecificCreatorForMessage;
        }
    
        return $this;
    }
    
    public function getAllowModerationSpecificCreationDateForMessage(): bool
    {
        return $this->allowModerationSpecificCreationDateForMessage;
    }
    
    public function setAllowModerationSpecificCreationDateForMessage(bool $allowModerationSpecificCreationDateForMessage): self
    {
        if ((bool) $this->allowModerationSpecificCreationDateForMessage !== $allowModerationSpecificCreationDateForMessage) {
            $this->allowModerationSpecificCreationDateForMessage = $allowModerationSpecificCreationDateForMessage;
        }
    
        return $this;
    }
    
    public function getEnabledFinderTypes(): string
    {
        return $this->enabledFinderTypes;
    }
    
    public function setEnabledFinderTypes(string $enabledFinderTypes): self
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = $enabledFinderTypes ?? '';
        }
    
        return $this;
    }
    
    /**
     * Loads module variables from the database.
     */
    protected function load(): void
    {
        $moduleVars = $this->variableApi->getAll('MUNewsModule');
    
        if (isset($moduleVars['enableAttribution'])) {
            $this->setEnableAttribution($moduleVars['enableAttribution']);
        }
        if (isset($moduleVars['enableMultiLanguage'])) {
            $this->setEnableMultiLanguage($moduleVars['enableMultiLanguage']);
        }
        if (isset($moduleVars['showAuthor'])) {
            $this->setShowAuthor($moduleVars['showAuthor']);
        }
        if (isset($moduleVars['showDate'])) {
            $this->setShowDate($moduleVars['showDate']);
        }
        if (isset($moduleVars['enableCategorization'])) {
            $this->setEnableCategorization($moduleVars['enableCategorization']);
        }
        if (isset($moduleVars['defaultMessageSorting'])) {
            $this->setDefaultMessageSorting($moduleVars['defaultMessageSorting']);
        }
        if (isset($moduleVars['defaultMessageSortingBackend'])) {
            $this->setDefaultMessageSortingBackend($moduleVars['defaultMessageSortingBackend']);
        }
        if (isset($moduleVars['sortingDirection'])) {
            $this->setSortingDirection($moduleVars['sortingDirection']);
        }
        if (isset($moduleVars['enableMoreMessagesInCategory'])) {
            $this->setEnableMoreMessagesInCategory($moduleVars['enableMoreMessagesInCategory']);
        }
        if (isset($moduleVars['amountOfMoreArticlesInCategory'])) {
            $this->setAmountOfMoreArticlesInCategory($moduleVars['amountOfMoreArticlesInCategory']);
        }
        if (isset($moduleVars['displayPdfLink'])) {
            $this->setDisplayPdfLink($moduleVars['displayPdfLink']);
        }
        if (isset($moduleVars['enablePictureUpload'])) {
            $this->setEnablePictureUpload($moduleVars['enablePictureUpload']);
        }
        if (isset($moduleVars['imageFloatOnViewPage'])) {
            $this->setImageFloatOnViewPage($moduleVars['imageFloatOnViewPage']);
        }
        if (isset($moduleVars['imageFloatOnDisplayPage'])) {
            $this->setImageFloatOnDisplayPage($moduleVars['imageFloatOnDisplayPage']);
        }
        if (isset($moduleVars['maxSize'])) {
            $this->setMaxSize($moduleVars['maxSize']);
        }
        if (isset($moduleVars['messageEntriesPerPage'])) {
            $this->setMessageEntriesPerPage($moduleVars['messageEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnMessagesOnAccountPage'])) {
            $this->setLinkOwnMessagesOnAccountPage($moduleVars['linkOwnMessagesOnAccountPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['filterDataByLocale'])) {
            $this->setFilterDataByLocale($moduleVars['filterDataByLocale']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload1'])) {
            $this->setEnableShrinkingForMessageImageUpload1($moduleVars['enableShrinkingForMessageImageUpload1']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload1'])) {
            $this->setShrinkWidthMessageImageUpload1($moduleVars['shrinkWidthMessageImageUpload1']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload1'])) {
            $this->setShrinkHeightMessageImageUpload1($moduleVars['shrinkHeightMessageImageUpload1']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload1'])) {
            $this->setThumbnailModeMessageImageUpload1($moduleVars['thumbnailModeMessageImageUpload1']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload1View'])) {
            $this->setThumbnailWidthMessageImageUpload1View($moduleVars['thumbnailWidthMessageImageUpload1View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload1View'])) {
            $this->setThumbnailHeightMessageImageUpload1View($moduleVars['thumbnailHeightMessageImageUpload1View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload1Display'])) {
            $this->setThumbnailWidthMessageImageUpload1Display($moduleVars['thumbnailWidthMessageImageUpload1Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload1Display'])) {
            $this->setThumbnailHeightMessageImageUpload1Display($moduleVars['thumbnailHeightMessageImageUpload1Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload1Edit'])) {
            $this->setThumbnailWidthMessageImageUpload1Edit($moduleVars['thumbnailWidthMessageImageUpload1Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload1Edit'])) {
            $this->setThumbnailHeightMessageImageUpload1Edit($moduleVars['thumbnailHeightMessageImageUpload1Edit']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload2'])) {
            $this->setEnableShrinkingForMessageImageUpload2($moduleVars['enableShrinkingForMessageImageUpload2']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload2'])) {
            $this->setShrinkWidthMessageImageUpload2($moduleVars['shrinkWidthMessageImageUpload2']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload2'])) {
            $this->setShrinkHeightMessageImageUpload2($moduleVars['shrinkHeightMessageImageUpload2']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload2'])) {
            $this->setThumbnailModeMessageImageUpload2($moduleVars['thumbnailModeMessageImageUpload2']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload2View'])) {
            $this->setThumbnailWidthMessageImageUpload2View($moduleVars['thumbnailWidthMessageImageUpload2View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload2View'])) {
            $this->setThumbnailHeightMessageImageUpload2View($moduleVars['thumbnailHeightMessageImageUpload2View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload2Display'])) {
            $this->setThumbnailWidthMessageImageUpload2Display($moduleVars['thumbnailWidthMessageImageUpload2Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload2Display'])) {
            $this->setThumbnailHeightMessageImageUpload2Display($moduleVars['thumbnailHeightMessageImageUpload2Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload2Edit'])) {
            $this->setThumbnailWidthMessageImageUpload2Edit($moduleVars['thumbnailWidthMessageImageUpload2Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload2Edit'])) {
            $this->setThumbnailHeightMessageImageUpload2Edit($moduleVars['thumbnailHeightMessageImageUpload2Edit']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload3'])) {
            $this->setEnableShrinkingForMessageImageUpload3($moduleVars['enableShrinkingForMessageImageUpload3']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload3'])) {
            $this->setShrinkWidthMessageImageUpload3($moduleVars['shrinkWidthMessageImageUpload3']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload3'])) {
            $this->setShrinkHeightMessageImageUpload3($moduleVars['shrinkHeightMessageImageUpload3']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload3'])) {
            $this->setThumbnailModeMessageImageUpload3($moduleVars['thumbnailModeMessageImageUpload3']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload3View'])) {
            $this->setThumbnailWidthMessageImageUpload3View($moduleVars['thumbnailWidthMessageImageUpload3View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload3View'])) {
            $this->setThumbnailHeightMessageImageUpload3View($moduleVars['thumbnailHeightMessageImageUpload3View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload3Display'])) {
            $this->setThumbnailWidthMessageImageUpload3Display($moduleVars['thumbnailWidthMessageImageUpload3Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload3Display'])) {
            $this->setThumbnailHeightMessageImageUpload3Display($moduleVars['thumbnailHeightMessageImageUpload3Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload3Edit'])) {
            $this->setThumbnailWidthMessageImageUpload3Edit($moduleVars['thumbnailWidthMessageImageUpload3Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload3Edit'])) {
            $this->setThumbnailHeightMessageImageUpload3Edit($moduleVars['thumbnailHeightMessageImageUpload3Edit']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload4'])) {
            $this->setEnableShrinkingForMessageImageUpload4($moduleVars['enableShrinkingForMessageImageUpload4']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload4'])) {
            $this->setShrinkWidthMessageImageUpload4($moduleVars['shrinkWidthMessageImageUpload4']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload4'])) {
            $this->setShrinkHeightMessageImageUpload4($moduleVars['shrinkHeightMessageImageUpload4']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload4'])) {
            $this->setThumbnailModeMessageImageUpload4($moduleVars['thumbnailModeMessageImageUpload4']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload4View'])) {
            $this->setThumbnailWidthMessageImageUpload4View($moduleVars['thumbnailWidthMessageImageUpload4View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload4View'])) {
            $this->setThumbnailHeightMessageImageUpload4View($moduleVars['thumbnailHeightMessageImageUpload4View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload4Display'])) {
            $this->setThumbnailWidthMessageImageUpload4Display($moduleVars['thumbnailWidthMessageImageUpload4Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload4Display'])) {
            $this->setThumbnailHeightMessageImageUpload4Display($moduleVars['thumbnailHeightMessageImageUpload4Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload4Edit'])) {
            $this->setThumbnailWidthMessageImageUpload4Edit($moduleVars['thumbnailWidthMessageImageUpload4Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload4Edit'])) {
            $this->setThumbnailHeightMessageImageUpload4Edit($moduleVars['thumbnailHeightMessageImageUpload4Edit']);
        }
        if (isset($moduleVars['enableShrinkingForImageTheFile'])) {
            $this->setEnableShrinkingForImageTheFile($moduleVars['enableShrinkingForImageTheFile']);
        }
        if (isset($moduleVars['shrinkWidthImageTheFile'])) {
            $this->setShrinkWidthImageTheFile($moduleVars['shrinkWidthImageTheFile']);
        }
        if (isset($moduleVars['shrinkHeightImageTheFile'])) {
            $this->setShrinkHeightImageTheFile($moduleVars['shrinkHeightImageTheFile']);
        }
        if (isset($moduleVars['thumbnailModeImageTheFile'])) {
            $this->setThumbnailModeImageTheFile($moduleVars['thumbnailModeImageTheFile']);
        }
        if (isset($moduleVars['moderationGroupForMessages'])) {
            $this->setModerationGroupForMessages($moduleVars['moderationGroupForMessages']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForMessage'])) {
            $this->setAllowModerationSpecificCreatorForMessage($moduleVars['allowModerationSpecificCreatorForMessage']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForMessage'])) {
            $this->setAllowModerationSpecificCreationDateForMessage($moduleVars['allowModerationSpecificCreationDateForMessage']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForMessages();
        if (GroupsConstant::GROUP_ID_USERS > $groupId) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForMessages($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save(): void
    {
        // normalise group selector values
        $group = $this->getModerationGroupForMessages();
        $group = is_object($group) ? $group->getGid() : (int) $group;
        $this->setModerationGroupForMessages($group);
    
        $this->variableApi->set('MUNewsModule', 'enableAttribution', $this->getEnableAttribution());
        $this->variableApi->set('MUNewsModule', 'enableMultiLanguage', $this->getEnableMultiLanguage());
        $this->variableApi->set('MUNewsModule', 'showAuthor', $this->getShowAuthor());
        $this->variableApi->set('MUNewsModule', 'showDate', $this->getShowDate());
        $this->variableApi->set('MUNewsModule', 'enableCategorization', $this->getEnableCategorization());
        $this->variableApi->set('MUNewsModule', 'defaultMessageSorting', $this->getDefaultMessageSorting());
        $this->variableApi->set('MUNewsModule', 'defaultMessageSortingBackend', $this->getDefaultMessageSortingBackend());
        $this->variableApi->set('MUNewsModule', 'sortingDirection', $this->getSortingDirection());
        $this->variableApi->set('MUNewsModule', 'enableMoreMessagesInCategory', $this->getEnableMoreMessagesInCategory());
        $this->variableApi->set('MUNewsModule', 'amountOfMoreArticlesInCategory', $this->getAmountOfMoreArticlesInCategory());
        $this->variableApi->set('MUNewsModule', 'displayPdfLink', $this->getDisplayPdfLink());
        $this->variableApi->set('MUNewsModule', 'enablePictureUpload', $this->getEnablePictureUpload());
        $this->variableApi->set('MUNewsModule', 'imageFloatOnViewPage', $this->getImageFloatOnViewPage());
        $this->variableApi->set('MUNewsModule', 'imageFloatOnDisplayPage', $this->getImageFloatOnDisplayPage());
        $this->variableApi->set('MUNewsModule', 'maxSize', $this->getMaxSize());
        $this->variableApi->set('MUNewsModule', 'messageEntriesPerPage', $this->getMessageEntriesPerPage());
        $this->variableApi->set('MUNewsModule', 'linkOwnMessagesOnAccountPage', $this->getLinkOwnMessagesOnAccountPage());
        $this->variableApi->set('MUNewsModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('MUNewsModule', 'filterDataByLocale', $this->getFilterDataByLocale());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload1', $this->getEnableShrinkingForMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload1', $this->getShrinkWidthMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload1', $this->getShrinkHeightMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload1', $this->getThumbnailModeMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload1View', $this->getThumbnailWidthMessageImageUpload1View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload1View', $this->getThumbnailHeightMessageImageUpload1View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload1Display', $this->getThumbnailWidthMessageImageUpload1Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload1Display', $this->getThumbnailHeightMessageImageUpload1Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload1Edit', $this->getThumbnailWidthMessageImageUpload1Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload1Edit', $this->getThumbnailHeightMessageImageUpload1Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload2', $this->getEnableShrinkingForMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload2', $this->getShrinkWidthMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload2', $this->getShrinkHeightMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload2', $this->getThumbnailModeMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload2View', $this->getThumbnailWidthMessageImageUpload2View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload2View', $this->getThumbnailHeightMessageImageUpload2View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload2Display', $this->getThumbnailWidthMessageImageUpload2Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload2Display', $this->getThumbnailHeightMessageImageUpload2Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload2Edit', $this->getThumbnailWidthMessageImageUpload2Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload2Edit', $this->getThumbnailHeightMessageImageUpload2Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload3', $this->getEnableShrinkingForMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload3', $this->getShrinkWidthMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload3', $this->getShrinkHeightMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload3', $this->getThumbnailModeMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload3View', $this->getThumbnailWidthMessageImageUpload3View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload3View', $this->getThumbnailHeightMessageImageUpload3View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload3Display', $this->getThumbnailWidthMessageImageUpload3Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload3Display', $this->getThumbnailHeightMessageImageUpload3Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload3Edit', $this->getThumbnailWidthMessageImageUpload3Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload3Edit', $this->getThumbnailHeightMessageImageUpload3Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload4', $this->getEnableShrinkingForMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload4', $this->getShrinkWidthMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload4', $this->getShrinkHeightMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload4', $this->getThumbnailModeMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload4View', $this->getThumbnailWidthMessageImageUpload4View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload4View', $this->getThumbnailHeightMessageImageUpload4View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload4Display', $this->getThumbnailWidthMessageImageUpload4Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload4Display', $this->getThumbnailHeightMessageImageUpload4Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload4Edit', $this->getThumbnailWidthMessageImageUpload4Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload4Edit', $this->getThumbnailHeightMessageImageUpload4Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForImageTheFile', $this->getEnableShrinkingForImageTheFile());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthImageTheFile', $this->getShrinkWidthImageTheFile());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightImageTheFile', $this->getShrinkHeightImageTheFile());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeImageTheFile', $this->getThumbnailModeImageTheFile());
        $this->variableApi->set('MUNewsModule', 'moderationGroupForMessages', $this->getModerationGroupForMessages());
        $this->variableApi->set('MUNewsModule', 'allowModerationSpecificCreatorForMessage', $this->getAllowModerationSpecificCreatorForMessage());
        $this->variableApi->set('MUNewsModule', 'allowModerationSpecificCreationDateForMessage', $this->getAllowModerationSpecificCreationDateForMessage());
        $this->variableApi->set('MUNewsModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
